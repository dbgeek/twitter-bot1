AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Example how to use sam and go lambda functions
# More info about Globals: https://github.com/dbgeek/ec2-start-stop/README.md
Globals:
  Function:
    Timeout: 360

Parameters:

  ConsumerKey:
      Description: 'Twitter consumer key'
      Type: 'AWS::SSM::Parameter::Value<String>'
      Default: CONSUMER_KEY
  ConsumerSecretKey:
      Description: 'Twitter consumer secret_key'
      Type: 'AWS::SSM::Parameter::Value<String>'
      Default: CONSUMER_SECRET_KEY
  OauthToken:
      Description: 'Twitter consumer key'
      Type: 'AWS::SSM::Parameter::Value<String>'
      Default: OAUTH_TOKEN
  OauthSecret:
      Description: 'Twitter consumer secret_key'
      Type: 'AWS::SSM::Parameter::Value<String>'
      Default: OAUTH_SECRET

Resources:
  twitterBot:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: twitter-bot1/dist/twitter-bot1.zip
      Handler: twitter-bot1
      Runtime: go1.x
      Role: !GetAtt twitterBotRole.Arn
      Events:
          GetEvent:
            Type: Api
            Properties:
              RestApiId: !Ref twitterBotApi
              Path: /twitter
              Method: get
      Environment:
        Variables:
          CONSUMER_KEY: !Ref ConsumerKey
          CONSUMER_SECRET_KEY: !Ref ConsumerSecretKey

  twitterWebHookPayload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: twitter-webhook-payload/dist/twitter-webhook-payload.zip
      Handler: twitter-webhook-payload
      Runtime: go1.x
      Role: !GetAtt twitterBotRole.Arn
      Events:
          GetEvent:
            Type: Api
            Properties:
              RestApiId: !Ref twitterBotApi
              Path: /twitter
              Method: post
      Environment:
        Variables:
          CONSUMER_KEY: !Ref ConsumerKey
          CONSUMER_SECRET_KEY: !Ref ConsumerSecretKey

  twitterGetPicture:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: twitter-get-picture/dist/twitter-get-picture.zip
      Handler: twitter-get-picture
      Runtime: go1.x
      Role: !GetAtt twitterBotRole.Arn
      Environment:
        Variables:
          CONSUMER_KEY: !Ref ConsumerKey
          CONSUMER_SECRET_KEY: !Ref ConsumerSecretKey
          OAUTH_TOKEN: !Ref OauthToken
          OAUTH_SECRET: !Ref OauthSecret
          PICTURE_BUCKET: !Ref PictureBucket
        
  twitterRekognition:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: twitter-rekognition/dist/twitter-rekognition.zip
      Handler: twitter-rekognition
      Runtime: go1.x
      Role: !GetAtt twitterBotRole.Arn
      Environment:
        Variables:
          CONSUMER_KEY: !Ref ConsumerKey
          CONSUMER_SECRET_KEY: !Ref ConsumerSecretKey
          OAUTH_TOKEN: !Ref OauthToken
          OAUTH_SECRET: !Ref OauthSecret

  twitterReply:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: twitter-reply/dist/twitter-reply.zip
      Handler: twitter-reply
      Runtime: go1.x
      Role: !GetAtt twitterBotRole.Arn
      Environment:
        Variables:
          CONSUMER_KEY: !Ref ConsumerKey
          CONSUMER_SECRET_KEY: !Ref ConsumerSecretKey
          OAUTH_TOKEN: !Ref OauthToken
          OAUTH_SECRET: !Ref OauthSecret

  twitterBotApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: twitter-bot-Api
      StageName: twitter
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Ref AWS::StackName
        paths:
          /twitter:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${twitterBot.Arn}/invocations
              responses: 
                default:
                  statusCode: "200"
                  responseParameters:
                    method.response.header.Content-Type: "'application/json'"
            post:
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                         Access-Control-Allow-Headers:
                          type: "string"
                  security: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseTemplates:
                          application/json:
                            !Sub
                              |-
                                {
                                    "token": $input.json('$.executionArn').split(':')[7].replace('"', "")
                                }
                        headers:
                         Access-Control-Allow-Headers:
                          type: "'*'"
                    passthroughBehavior: "WHEN_NO_TEMPLATES"
                    httpMethod: "POST"
                    type: "aws"
                    credentials: !GetAtt APIGatewayRole.Arn
                    uri: "arn:aws:apigateway:eu-north-1:states:action/StartExecution"
                    requestTemplates:
                      application/json:
                        !Sub
                          |-
                            #set($twitterPayload = $util.escapeJavaScript($input.json('$')))
                            {
                              "input": "{ \"rawinput\": \"$util.escapeJavaScript($util.base64Encode($input.body))\", \"webhooks-signature\": \"$input.params('X-Twitter-Webhooks-Signature')\", \"twitter-payload\": $twitterPayload }",
                              "name": "$context.requestId",
                              "stateMachineArn": "${StateMachineTwitter}"
                            }

  APIGatewayRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
  
  Account: 
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt APIGatewayRole.Arn

  twitterBotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess
      Policies:
        - PolicyName: "ssm"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                Resource: "*"
        - PolicyName: "s3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: "*"

  StateMachineTwitter:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "A Hello World example",
              "StartAt": "TwitterWebHook",
              "States": {
                "TwitterWebHook": {
                  "Type": "Task",
                  "Resource": "${twitterWebHookPayloadArn}",
                  "Next": "CheckMedia"
                },
                "CheckMedia": {
                  "Type": "Choice",
                  "Choices": [{
                  "Variable": "$.picture-exists",
                  "BooleanEquals": true,
                  "Next": "GetPicture"
                  }],
                  "Default": "Done"
                },
                "GetPicture": {
                  "Type": "Task",
                  "Resource": "${twitterGetPictureArn}",
                  "Next": "Done"
                },
                "Done": {
                  "Type": "Succeed"
                }
              }
            }
          - {
              twitterWebHookPayloadArn: !GetAtt [ twitterWebHookPayload, Arn ],
              twitterGetPictureArn: !GetAtt [ twitterGetPicture, Arn ]
            }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  
  PictureBucket:
    Type: AWS::S3::Bucket

Outputs:
  apiurl:
    Description: API url
    Value: !Sub https://${twitterBotApi}.execute-api.${AWS::Region}.amazonaws.com/Stage
